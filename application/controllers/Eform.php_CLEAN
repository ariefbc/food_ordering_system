<?php

if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/**
 * 
 */
class Eform2 extends CI_Controller {
	private $view_name = 'Vwhome';
	private $control_name = 'eform2';
	private $content_name = 'content/content_eform2';

	function __construct() {
		parent::__construct();
		$this->load->library($this->content_name,'','content');
		$this->load->library('app_initializer','','app_init');
		$this->load->library('wf','','wf');
		$this->load->model('data_process_eform2','dp_eform',TRUE);
		$this->load->model('data_process_translate','',TRUE);
		$this->load->model('user','',TRUE);
		$this->load->model('data_process_timeset','datetime',TRUE);
	}
	
	function load_datagrid($data_menu,$menu_name,$datapost,$limit,$offset,$formtype,$subform_name,$main_id = 0,$act=''){

		$datasession = $this->session->userdata('logged_in');
		$language = $datasession['language'];
		
		$grid_fields = $this->dp_eform->get_grid_fields($data_menu,$formtype,$subform_name);
		
		$headings = array($this->data_process_translate->check_vocab($language,"No."));

		foreach ($grid_fields as $grid_field){
			array_push($headings,$this->data_process_translate->check_vocab($language,$grid_field->column_header));
		}
		
		$query = $this->dp_eform->load_data($data_menu,$datapost,$limit,$offset,$formtype,$subform_name,$main_id);
		
		$tmpl = array ('table_open' => '<table id=\'dbgrid\' class=\'table table-bordered table-striped\'>');
		$this->table->set_template($tmpl);
		$this->table->set_heading($headings);
		
		$data_menu_tmp['is_insert_disable'] = $data_menu['is_insert_disable'];
		$data_menu_tmp['is_edit_disable'] = $data_menu['is_edit_disable'];
		$data_menu_tmp['is_delete_disable'] = $data_menu['is_delete_disable'];
					
		$no = $offset;
		
		foreach ($query as $row) {
			////////// Link on the right column handling ///////////////////////////////
				if ($this->wf->lock_data_editing($data_menu,($formtype == 'mainform')? $row->Id : $main_id)){
					$data_menu['is_insert_disable'] = 1;
					$data_menu['is_edit_disable'] = 1;
					$data_menu['is_delete_disable'] = 1;
				}else{
					$data_menu['is_insert_disable'] = $data_menu_tmp['is_insert_disable'];
					$data_menu['is_edit_disable'] = $data_menu_tmp['is_edit_disable'];
					$data_menu['is_delete_disable'] = $data_menu_tmp['is_delete_disable'];
				}
				
				$btn_edit_label = ($data_menu['is_edit_disable'] == 1)? "Detail" : "Edit";
				
				if ($formtype != 'subform'){
					$btn_remove = ($data_menu['is_delete_disable'] == 1)? "" : " " .anchor($this->control_name.'/remove/'.$menu_name.'/'. $row->Id, "[".$this->data_process_translate->check_vocab($language,"Remove")."]");
					
					$task = anchor($this->control_name.'/edit/'.$menu_name.'/'. $row->Id, "[".$this->data_process_translate->check_vocab($language,$btn_edit_label)."]") .$btn_remove;	
				}else{
					$btn_remove = ($act == 'delete' ||  $data_menu['is_edit_disable'] == 1)? "" : " " .anchor($this->control_name.'/subform/remove/'.$menu_name.'/'.$subform_name.'/'.$main_id.'/'. $row->Id, "[".$this->data_process_translate->check_vocab($language,"Remove")."]");
					
					if ($subform_name == 'Promotional Materials') {$btn_remove = '';}

					$btn_edit = anchor($this->control_name.'/subform/edit/'.$menu_name.'/'.$subform_name.'/'. $main_id.'/'.$row->Id, "[".$this->data_process_translate->check_vocab($language,$btn_edit_label)."]");
					
					if ($act == 'new' && ($btn_remove != '' || $btn_edit != '')){
						$btn_remove = '';
						$btn_edit = '';
					}
					$task = $btn_edit.$btn_remove;
				}
		    /////////////////////////////////////////////////////////////////////////////////////
	        	$no++;
	        	$content = array($no);

				foreach ($grid_fields as $grid_field){
			 		$grid_value = '';
			 		if ($grid_field->control_type != 'extend'){
						$field = $grid_field->field_name;
						$tmp_value = $row->$field;
			 		}else{
			 			///////////// if field grid is a extend component ////////////////////////////////////
			 			$tmp = "";
						$extend_component_id = $grid_field->field_name;
						$data_component = $this->dp_eform->get_data_specific_component($extend_component_id);
						$data_extended_menu = $this->dp_eform->get_data_menu($data_component[0]->menu_id);
						$extended_data_table_name = $data_extended_menu['full_table_name'];
						$extended_data_field_name = $data_component[0]->field_name;
						$extended_data_column_id = $extended_data_table_name.'_id';
						
						$is_data_subform = FALSE;
						if ($data_component[0]->sub_form_id != NULL){
							$is_data_subform = TRUE;
							$extended_data_table_name = $this->dp_eform->get_data_subform_by_id($data_component[0]->sub_form_id)[0]->full_table_name;
						}
						$extended_field =  $extended_data_table_name.'_id';
						$extended_data_id = $row->$extended_field;
						$extended_data_detail = $this->dp_eform->get_extended_data_detail($extended_data_table_name,$extended_data_id,$is_data_subform,$extended_data_column_id);
						if (count($extended_data_detail) >= 1){
							$row_data_detail = $extended_data_detail[0];
							$tmp_value = $row_data_detail->$extended_data_field_name;
														
							if (count($extended_data_detail) > 1){
								$tmp .= "<ul>";	
							}
							
							foreach($extended_data_detail as $row_data_detail){
								switch ($data_component[0]->control_type)	{
									case 'text':
										$tmp .= (count($extended_data_detail) > 1)? '<li>'.$row_data_detail->$extended_data_field_name.'</li>' : $row_data_detail->$extended_data_field_name;
										break;
									case 'fileuploader':
										if ($row_data_detail->$extended_data_field_name != NULL && $row_data_detail->$extended_data_field_name != ""){
											
											$app_init = $this->app_init->app_init();
											$file_dir = $app_init['file_upload_dir'];

											$filename_contains_prefix = FALSE;
											$filename_link = $row_data_detail->$extended_data_field_name;

											if (strpos($filename_link, '__') !== false) {
											    $filename_contains_prefix = TRUE;
											}

											if ($filename_contains_prefix) {
												$filename_array = explode('__', $filename_string);
												$filename_link = $filename_array[1];
											}

											$tmp .= (count($extended_data_detail) > 1)? '<li>'.anchor_popup($file_dir.$data_component[0]->upload_path.'/'.$row_data_detail->$extended_data_field_name,$filename_link,array()).'</li>' : anchor_popup($file_dir.$data_component[0]->upload_path.'/'.$row_data_detail->$extended_data_field_name,$filename_link,array());
										}
										break;
									case 'datepicker':
										$tmp .= (count($extended_data_detail) > 1)? '<li>'.$this->datetime->convert_mysql_date_format_to_short_string($row_data_detail->$extended_data_field_name).'</li>' : $this->datetime->convert_mysql_date_format_to_short_string($row_data_detail->$extended_data_field_name);
										break;
									case 'datepickerforward':
										$tmp .= (count($extended_data_detail) > 1)? '<li>'.$this->datetime->convert_mysql_date_format_to_short_string($row_data_detail->$extended_data_field_name).'</li>' : $this->datetime->convert_mysql_date_format_to_short_string($row_data_detail->$extended_data_field_name);
										break;
									case 'dropdown':
										$options = array();
										if ($data_component[0]->item_source == 'manageditems'){
											$query_tmp = $this->dp_eform->get_selectionitems($data_component[0]->Id);
										}
										
										if ($data_component[0]->item_source == 'datatable'){
											$query_tmp = $this->dp_eform->get_selectiondatatableitems($data_component[0]->Id);
										}
										
										if ($data_component[0]->item_source == 'appusers'){
											$datasession = $this->session->userdata('logged_in');
											$query_tmp = $this->dp_eform->get_selectiondatataappusers($datasession['app_id']);
										}
										
										if ($data_component[0]->item_source == 'manageditems' || $data_component[0]->item_source == 'datatable' || $data_component[0]->item_source == 'appusers'){
											foreach ($query_tmp as $row_tmp){
												$options[$row_tmp->item_value] = $row_tmp->item_text;		
											}
										}
										
										if ($data_component[0] == 'monthpicker'){
											$options = $this->get_array_months();
										}

										if ($data_component[0] == 'year_type_1'){
											$from_year = date('Y') - 0;
											$until_year = date('Y') + 1;
											while ($from_year <= $until_year){
												$options[$from_year] = $from_year;
												$from_year++;
											}
										}
										
										if ($data_component[0] == 'year_type_2'){
											$from_year = date('Y') - 10;
											$until_year = date('Y') + 0;
											while ($from_year <= $until_year){
												$options[$from_year] = $from_year;
												$from_year++;
											}
										}
										
										if ($data_component[0] == 'year_type_3'){
											$from_year = date('Y') - 60;
											$until_year = date('Y') - 18;
											while ($from_year <= $until_year){
												$options[$from_year] = $from_year;
												$from_year++;
											}
										}	
										
										$tmp .= (count($extended_data_detail) > 1)? '<li>'.$options[$row_data_detail->$extended_data_field_name].'</li>' : $options[$row_data_detail->$extended_data_field_name];		
										break;
									default:
									$tmp = "";
								}		
							}
							
							if (count($extended_data_detail) > 1){
								$tmp .= "</ul>";	
							}
							$tmp_value = $tmp;
						}else{
							$tmp_value = NULL;	
						}
						///////////////////////////////////////////////////////////////////////////////////////////////////
			 		}
			 		
			 		if ($grid_field->control_type != 'dropdown'){
			 			switch ($grid_field->field_type){
							case 'decimal':
								$grid_value = number_format($tmp_value,2);
								break;
							case 'int':
								$grid_value = number_format($tmp_value);
								break;
							case 'datetime':
								$grid_value = ($tmp_value != NULL)? $this->datetime->convert_mysql_date_format_to_short_string($tmp_value) : $tmp_value;
								break;
							default:
								if ($grid_field->control_type == 'fileuploader') {
										if ($tmp_value != NULL && $tmp_value != ''){
											$app_init = $this->app_init->app_init();
											$file_dir = $app_init['file_upload_dir'];

											$filename_string = $tmp_value;

											$filename_contains_prefix = FALSE;
											$filename_link = $tmp_value;

											if (strpos($filename_link, '__') !== FALSE) {
											    $filename_contains_prefix = TRUE;
											}

											if ($filename_contains_prefix) {
												$filename_array = explode('__', $filename_string);
												$filename_link = $filename_array[1];
											}
											
											$grid_value = anchor_popup($file_dir.$grid_field->upload_path.'/'.$tmp_value,$filename_link,array());
										}else{
											$grid_value = $tmp_value;
										}
									}else{
										$grid_value = $tmp_value;
									}
						}
					} else{
						if ($grid_field->item_source == 'datatable'){
							$look_up_data['component_id'] = $grid_field->Id;
							$look_up_data['value'] = $tmp_value;
							
							$grid_value =  $this->dp_eform->look_up_value($look_up_data);
						}
						if ($grid_field->item_source == 'manageditems'){
							$look_up_item['component_id'] = $grid_field->Id;
							$look_up_item['value'] = $tmp_value;
							
							$grid_value =  $this->dp_eform->look_up_item($look_up_item);
						}
						if ($grid_field->item_source == 'appusers'){
							$look_up_user['value'] = $tmp_value;
							
							$grid_value =  $this->dp_eform->look_up_user($look_up_user);
						}
						if ($grid_field->item_source == 'monthpicker'){
							$options = $this->get_array_months();
							if ($tmp_value != ''){
								$grid_value = $options[$tmp_value];
							}else{
								$grid_value = $tmp_value;
							}
						}
						if ($grid_field->item_source == 'year_type_1' || $grid_field->item_source == 'year_type_2' || $grid_field->item_source == 'year_type_3'){
							$grid_value = $tmp_value;
						}
					}
					
					array_push($content,$grid_value);
				}

				array_push($content,$task);
		     	
		     	if ($data_menu['is_approval'] != 1){
		     		$this->table->add_row($content);
		     	}else{
		     		if ($formtype == 'subform'){
		     			$this->table->add_row($content);
		     		}
		     	}
			}
		
		return $this->table->generate();
	}
	
	function get_array_months(){
		$options['JAN'] = 'January';
		$options['FEB'] = 'February';
		$options['MAR'] = 'March';
		$options['APR'] = 'April';
		$options['MAY'] = 'May';
		$options['JUN'] = 'June';
		$options['JUL'] = 'July';
		$options['AUG'] = 'August';
		$options['SEP'] = 'September';
		$options['OCT'] = 'October';
		$options['NOV'] = 'November';
		$options['DEC'] = 'December';

		return $options;
	}

	function popup_masterevent($master_event_id){
		$this->session->set_userdata('bypass_masterevent',TRUE);
		redirect($this->control_name.'/edit/newevent/'.$master_event_id);
	}

	function get_form_components($language,$form_fields,$data_detail,$task,$datapost,$data_menu,$main_id = 0){
		$re_input = (count($datapost) >= 1)? TRUE : FALSE;
		
		$components = "";
		$component = "";
		$javas = "";
		$java = "";
		
		foreach ($form_fields as $form_field){
			$readonly = ($task == 'delete')? 'readonly' : '';
			$disabled = ($task == 'delete')? 'disabled' : '';
			
			$extended_field_default_value = array();

			if ($form_field->control_type != 'extend' && $form_field->control_type != 'separator'){
				if ($form_field->control_type != 'checkbox') {
					if (!array_key_exists($form_field->field_name, $datapost)) {
						$datapost[$form_field->field_name] = $data_detail[$form_field->field_name];
					}

					$extended_field_default_value = $this->dp_eform->get_extended_field_default_value($form_field->Id);

					if (!$extended_field_default_value) {
						$data_value = (count($datapost) >= 1)? $datapost[$form_field->field_name] : $data_detail[$form_field->field_name]; /// <--- if reinput set value from user input else set from db
					} else {
						$extended_data_id = $this->session->userdata('selection_id');

						$data_value = (count($datapost) >= 1 && $datapost[$form_field->field_name] != '')? $datapost[$form_field->field_name] : $this->dp_eform->get_extended_default_value($extended_data_id,$extended_field_default_value); /// <--- if reinput set value from user input else set from extended field as default value
					}
				} else {
					$checkbox_selections_origin_table = $this->dp_eform->get_checkbox_selections_origin_table($form_field->Id);

					$data_checkbox_array = $this->dp_eform->get_data_checkbox($formtype,$form_field->field_name,$data_menu,$data_detail['Id'],$checkbox_selections_origin_table);

					$data_value = ($re_input)? $datapost[$form_field->field_name] : $data_checkbox_array; /// <--- if reinput set value from user input else set from db
				}
			}else{
				$data_value='';
			}

			if ($form_field->control_type != 'separator') {
				$label = $this->data_process_translate->check_vocab($language,$form_field->control_label);
				$label .= ($form_field->required == 1)? "<font color=\"red\">*</font>" : "";
				$component = ($form_field->control_type != 'hidden')? "<label for=\"label\">".$label."</label>" : "";
			} else {
				$component = "";
			}

			$java = "";
			
			////////////// for hidden component ///////////////////////////////////////////
			if ($form_field->control_type == 'hidden'){
				$component .= "<input type=\"hidden\" name=\"".$form_field->control_name."\" value=\"".$form_field->hidden_value."\">";
			}
			////////////////////////////////////////////////////////////////////////////////////
			
			////////////// for extended data ///////////////////////////////////////////
			if ($form_field->control_type == 'extend'){
				$tmp = "";
				$extend_component_id = $form_field->field_name;
				$data_component = $this->dp_eform->get_data_specific_component($extend_component_id);
				
				$data_extended_menu = $this->dp_eform->get_data_menu($data_component[0]->menu_id);	
				$extended_data_table_name = $data_extended_menu['full_table_name'];
				$extended_data_field_name = $data_component[0]->field_name;
				$extended_data_column_id = $extended_data_table_name.'_id';
				
				$is_data_subform = FALSE;
				if ($data_component[0]->sub_form_id != NULL){
					$is_data_subform = TRUE;
					$extended_data_table_name = $this->dp_eform->get_data_subform_by_id($data_component[0]->sub_form_id)[0]->full_table_name;
					}
				
				$extended_data_id = $this->session->userdata('selection_id');
				$extended_data_detail = $this->dp_eform->get_extended_data_detail($extended_data_table_name,$extended_data_id,$is_data_subform,$extended_data_column_id);
				
				if (count($extended_data_detail) >= 1){
					if (count($extended_data_detail) > 1){
						$tmp .= "<ul>";	
					}
					foreach($extended_data_detail as $row_data_detail){
						switch ($data_component[0]->control_type)	{
							case 'text':
								$tmp .= (count($extended_data_detail) > 1)? '<li>'.$row_data_detail->$extended_data_field_name.'</li>' : $row_data_detail->$extended_data_field_name;
								break;
							case 'fileuploader':
								$filename_string = $row_data_detail->$extended_data_field_name;
								$filename_array = explode('__',$filename_string);
								if (count($filename_array)>=2) {
									$filename_string = $filename_array[1];
								}

								$app_init = $this->app_init->app_init();
								$file_dir = $app_init['file_upload_dir'];
								$tmp .= (count($extended_data_detail) > 1)? '<li>'.anchor_popup($file_dir.$data_component[0]->upload_path.'/'.$row_data_detail->$extended_data_field_name,$filename_string,array()).'</li>' : anchor_popup($file_dir.$data_component[0]->upload_path.'/'.$row_data_detail->$extended_data_field_name,$filename_string,array());
								break;
							case 'datepicker':
								$tmp .= (count($extended_data_detail) > 1)? '<li>'.$this->datetime->convert_mysql_date_format_to_short_string($row_data_detail->$extended_data_field_name).'</li>' : $this->datetime->convert_mysql_date_format_to_short_string($row_data_detail->$extended_data_field_name);
								break;
							case 'datepickerforward':
								$tmp .= (count($extended_data_detail) > 1)? '<li>'.$this->datetime->convert_mysql_date_format_to_short_string($row_data_detail->$extended_data_field_name).'</li>' : $this->datetime->convert_mysql_date_format_to_short_string($row_data_detail->$extended_data_field_name);
								break;
							case 'dropdown':
								$options = array();
								if ($data_component[0]->item_source == 'manageditems'){
									$query = $this->dp_eform->get_selectionitems($data_component[0]->Id);
								}
								
								if ($data_component[0]->item_source == 'datatable'){
									$query = $this->dp_eform->get_selectiondatatableitems($data_component[0]->Id);
								}
								
								if ($data_component[0]->item_source == 'appusers'){
									$datasession = $this->session->userdata('logged_in');
									$query = $this->dp_eform->get_selectiondatataappusers($datasession['app_id']);
								}
								
								if ($data_component[0]->item_source == 'manageditems' || $data_component[0]->item_source == 'datatable' || $data_component[0]->item_source == 'appusers'){
									foreach ($query as $row){
										$options[$row->item_value] = $row->item_text;		
									}
								}
								
								if ($data_component[0] == 'monthpicker'){
									$options = $this->get_array_months();
								}

								if ($data_component[0] == 'year_type_1'){
									$from_year = date('Y') - 0;
									$until_year = date('Y') + 1;
									while ($from_year <= $until_year){
										$options[$from_year] = $from_year;
										$from_year++;
									}
								}
								
								if ($data_component[0] == 'year_type_2'){
									$from_year = date('Y') - 10;
									$until_year = date('Y') + 0;
									while ($from_year <= $until_year){
										$options[$from_year] = $from_year;
										$from_year++;
									}
								}
								
								if ($data_component[0] == 'year_type_3'){
									$from_year = date('Y') - 60;
									$until_year = date('Y') - 18;
									while ($from_year <= $until_year){
										$options[$from_year] = $from_year;
										$from_year++;
									}
								}	
								
								$tmp .= (count($extended_data_detail) > 1)? '<li>'.$options[$row_data_detail->$extended_data_field_name].'</li>' : $options[$row_data_detail->$extended_data_field_name];		
								break;
							default:
							$tmp = "";
						}		
					}
					
					if (count($extended_data_detail) > 1){
						$tmp .= "</ul>";	
					}
				}else{
					$tmp = "";
				}
				
				$component .= "</br>".$tmp;
			}
			///////////////////////////////////////////////////////////////////////////////////
			
			////////////// for text area ///////////////////////////////////////////
			if ($form_field->control_type == 'textarea'){
				$data_ta = array(
							        'name'        => $form_field->control_name,
							        'id'          => $form_field->control_name,
							        'value'       => '',
							        'rows'        => $form_field->control_rows,
							        'cols'        => $form_field->control_cols,
							        'style'       => 'width:100%',
							        'class'       => 'form-control'
							    );
				$component .= form_textarea($data_ta);
			}

			////////////////////////////////////////////////////////////////////////

			////////////// for checkbox ///////////////////////////////////////////
			if ($form_field->control_type == 'checkbox') {
				$options = array();
				$query = $this->dp_eform->get_selectiondatatableitems($form_field->Id,$data_menu,$main_id);
				foreach ($query['query'] as $row){
					$options[$row->item_value] = $row->item_text;
				}

				foreach ($options as $key => $value) {
					$checkbox_checked = FALSE;

					if ($data_value) {
						foreach ($data_value as $key_datapost_checkbox => $value_datapost_checkbox) {
							if ($key == $value_datapost_checkbox) {
								$checkbox_checked = TRUE;
								break;
							}
						}	
					}
					
					$component .= "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
					$component .= form_checkbox($form_field->control_name.'[]', $key, $checkbox_checked)."&nbsp;".$value; 
				}
			}
			////////////////////////////////////////////////////////////////////////
			
			////////////// for text area ///////////////////////////////////////////
			if ($form_field->control_type == 'textarea') {
				$data_ta = array(
							        'name'        => $form_field->control_name,
							        'id'          => $form_field->control_name,
							        'value'       => '',
							        'rows'        => $form_field->control_rows,
							        'cols'        => $form_field->control_cols,
							        'style'       => 'width:100%',
							        'class'       => 'form-control'
							    );
				$component .= form_textarea($data_ta);
			}

			////////////////////////////////////////////////////////////////////////
			
			////////////// for textbox component ///////////////////////////////////
			if ($form_field->control_type == 'text' || $form_field->control_type == 'datepicker' || $form_field->control_type == 'datepickerforward' || $form_field->control_type == 'timepicker') {
				
				if ($data_menu['is_insert_disable'] != 1 || $data_menu['is_edit_disable'] != 1 || $data_menu['is_delete_disable'] != 1){

					$validate = ($form_field->is_numeric_only == 1) ? "onkeyup=\"validate_onkeypress(this)\"" : "";
					$timepicker = ($form_field->control_type == 'timepicker')? "timepicker" : "";
					
					$tmp = "<input type=\"input\" ".$readonly." class=\"form-control ".$timepicker."\" id=\"".$form_field->control_name."\" name = \"".$form_field->control_name."\" placeholder=\"".$this->data_process_translate->check_vocab($language,$form_field->control_label)."\" value=\"".$data_value."\" maxlength=\"".$form_field->control_maxlength."\" ".$validate." >";
					/////////////// If control is datepicker, datepickerforward, timepicker ///////////////////////////////////////////
					switch ($form_field->control_type) {
						    case 'datepicker':
						    	$java = "$(\"#".$form_field->control_name."\").datepicker({autoclose: true,format: 'dd-M-yyyy'});";
						        break;
						    case 'datepickerforward':
						    	$java = "$(\"#".$form_field->control_name."\").datepicker({autoclose: true,format: 'dd-M-yyyy',startDate: \"+0d\"});";
						        break;
						    case 'timepicker':
						        $java = "$(\"#".$form_field->control_name."\").timepicker({
          showInputs: false
        });";
						        break;
						    default:
						        $java = "";
						}
					//////////////////////////////////////////////////////////////////////////////////////////
					
					///////// If function add new enable and edit disabled ///////////////
					if ($task == 'edit' && $data_menu['is_edit_disable'] == 1){
						$java = "";	
						$tmp = "</br>".$data_value;
					}
					////////////////////////////////////////////////////////////////////////////////////////
					$component .= $tmp;
				} else {
					$component .= "</br>".$data_value;
				}
			}
			//////////////////////////////////////////////////////////////////////////////////
			
			////////////// for file uploader /////////////////////////////////////////////
			if ($form_field->control_type == 'fileuploader') {
				if ($task != 'delete') {
					if (($task == 'new' && $data_menu['is_insert_disable'] != 1) || ($task == 'edit' && $data_menu['is_edit_disable'] != 1)){
						$component .= "<input type=\"file\" id=\"".$form_field->control_name."\" name = \"".$form_field->control_name."\">";						}else{
							$component .= "</br>";		
						}
				}else{
					$component .= "</br>";	
				}				
				
				if ($data_value != ""){
					$filename_string = $data_value;
					$filename_array = explode('__',$filename_string);
					if (count($filename_array)>=2) {
						$filename_string = $filename_array[1];
					}

					$app_init = $this->app_init->app_init();
					$file_dir = $app_init['file_upload_dir'];
					$component .= "&nbsp;".anchor_popup($file_dir.$form_field->upload_path.'/'.$data_value,$filename_string,array());	
				}
			}
			//////////////////////////////////////////////////////////////////////////////////
			
			////////////// for password component ///////////////////////////////
			if ($form_field->control_type == 'password') $component .= "<input type=\"password\" ".$readonly." class=\"form-control\" id=\"".$form_field->control_name."\" name = \"".$form_field->control_name."\" placeholder=\"".$this->data_process_translate->check_vocab($language,$form_field->control_label)."\" maxlength=\"".$form_field->control_maxlength."\">";
			
			/////////////////////////////////////////////////////////////////////////////////
			
			////////////// for dropdown component //////////////////////////////
			if ($form_field->control_type == 'dropdown') {
				$options = array();
				if ($form_field->item_source == 'manageditems'){
					$query = $this->dp_eform->get_selectionitems($form_field->Id);
					foreach ($query as $row){
						$options[$row->item_value] = $row->item_text;		
					}
				}
				
				if ($form_field->item_source == 'datatable'){
					$query = $this->dp_eform->get_selectiondatatableitems($form_field->Id,$data_menu,$main_id);
					foreach ($query as $row){

						$options[$row->item_value] = $row->item_text;		
					}
				}
				
				if ($form_field->item_source == 'appusers'){
					$datasession = $this->session->userdata('logged_in');
					$query = $this->dp_eform->get_selectiondatataappusers($datasession['app_id']);
					foreach ($query as $row){
						$options[$row->item_value] = $row->item_text;		
					}
				}
				
				if ($form_field->item_source == 'monthpicker'){
					$options = $this->get_array_months();
				}

				if ($form_field->item_source == 'year_type_1'){
					$from_year = date('Y') - 0;
					$until_year = date('Y') + 1;
					while ($from_year <= $until_year){
						$options[$from_year] = $from_year;
						$from_year++;
					}
				}
				
				if ($form_field->item_source == 'year_type_2'){
					$from_year = date('Y') - 10;
					$until_year = date('Y') + 0;
					while ($from_year <= $until_year){
						$options[$from_year] = $from_year;
						$from_year++;
					}
				}
				
				if ($form_field->item_source == 'year_type_3'){
					$from_year = date('Y') - 60;
					$until_year = date('Y') - 18;
					while ($from_year <= $until_year){
						$options[$from_year] = $from_year;
						$from_year++;
					}
				}
				
			//////////////////////////////////////////////////////////////////////////////
				if ($data_menu['is_insert_disable'] != 1 || $data_menu['is_edit_disable'] != 1 || $data_menu['is_delete_disable'] != 1){
					$tmp = form_dropdown($form_field->control_name,$options,$data_value,'class="form-control select2" style="width: 100%;"'.$disabled);
					
					///////// If function add new enable and edit disabled ///////////////
					if ($task == 'edit' && $data_menu['is_edit_disable'] == 1){
						$tmp = "</br>".$options[$data_value];
					}
					////////////////////////////////////////////////////////////////////////////////////////
					$component .= $tmp;
				} else{
					if ($data_value != ''){
						$component .= "</br>".$options[$data_value];
					}
				}
			}
			
			# This part is original for all projects / common
			//	////////////////////////////////////////////////
			//$components.= ($form_field->control_type != 'timepicker')? "<div class=\"form-group\">".$component."</div>" : "<div class=\"bootstrap-timepicker\"><div class=\"form-group\">".$component."</div></div>";
			//$javas .= $java;
			

			$components.= ($form_field->control_type != 'timepicker')? "<div class=\"form-group\">".$component."</div>" : "<div class=\"bootstrap-timepicker\"><div class=\"form-group\">".$component."</div></div>";
				$javas .= $java;
		}
		
		$html_components['form_components'] = $components;
		$html_components['java_functions'] = $javas;
		return $html_components;
	}
	
	function process($menu_name,$formtype,$subform_name=''){
		$subform_name = str_replace('%20',' ',$subform_name);
		
		$datasession = $this->session->userdata('logged_in');
		
		$data_menu = $this->dp_eform->get_data_menu($menu_name);
		
		$id = isset($_POST['id']) ? $_POST['id'] : NULL;
		$task = isset($_POST['task']) ? $_POST['task'] : NULL;
		$datapost['main_id'] = isset($_POST['main_id']) ? $_POST['main_id'] : NULL;

		$form_fields = $this->dp_eform->get_form_fields_for_data_processing($data_menu['id'],$formtype,$task,$id,$subform_name);
		
		if ($task == 'edit' || $task == 'new'){
			$msgerror = "";
			if ($data_menu['is_approval'] == NULL){
				foreach($form_fields as $form_field){
					if ($form_field->control_type != 'fileuploader'){
						$datapost[$form_field->field_name] = isset($_POST[$form_field->control_name]) ? $_POST[$form_field->control_name] : NULL;

						if ($datapost[$form_field->field_name] != NULL && $form_field->convert_to_uppercase == 1) {
							$datapost[$form_field->field_name] = strtoupper($datapost[$form_field->field_name]);
						}

						if ($form_field->required == 1){
							$msgerror = ($msgerror == '' && ($datapost[$form_field->field_name]  == NULL || $datapost[$form_field->field_name] == '')) ? $this->data_process_translate->check_vocab($datasession['language'],$form_field->control_label." cannot be empty") : $msgerror;
						}		
					}
				}
			}
			
			$checkbox_fields = array();
			$checkbox_control_name = array();
			$checkbox_selections_origin_table = array();
			$checkbox_tables = array();

			if ($msgerror == ''){
				foreach($form_fields as $form_field){
					if ($form_field->control_type == 'checkbox'){
						$checkbox_tables[] = $form_field->field_name;
						$checkbox_selections_origin_table[] = $this->dp_eform->get_checkbox_selections_origin_table($form_field->Id);
					}

					if ($data_menu['is_approval'] == NULL){
						if ($form_field->control_type == 'fileuploader'){
						$file = $_FILES[$form_field->control_name];
						
						if (basename($file['name'] != '')){
							$username_file_string = $datasession['username'];
							$username_file_string = str_replace(" ", "", $username_file_string);
							$username_file_string = str_replace(".", "", $username_file_string);

							$current_datetime_string = $this->datetime->get_current_datetime();
							$current_datetime_string = str_replace("/", "", $current_datetime_string);
							$current_datetime_string = str_replace(" ", "", $current_datetime_string);
							$current_datetime_string = str_replace(":", "", $current_datetime_string);

							$filename_string = $username_file_string.$current_datetime_string.'__'.basename($file['name']);

							$app_init = $this->app_init->app_init();
							$file_dir = $app_init['file_upload_dir'];
							$target_dir = $file_dir.$form_field->upload_path.'/';
							$target_file = $target_dir.$filename_string;
							$origin_file = $file['tmp_name'];
							
							$file_is_valid = TRUE;
							
							//// check file upload size allowed /////////////////////////////
							$max_size_allowed = $form_field->upload_max_size * 1024;
							if ($file['size'] > $max_size_allowed){
								$file_is_valid = FALSE;
								$msgerror = $this->data_process_translate->check_vocab($datasession['language'],"allowed file size is exceeded");
							}
							/////////////////////////////////////////////////////////////////////////////
							
							//// check file type allowed ///////////////////////////////////////
							if ($file_is_valid){
								$file_type = pathinfo($target_file,PATHINFO_EXTENSION);
								$allowed_file_types = explode('|',$form_field->upload_types);
								foreach($allowed_file_types as $allowed_file_type){
									if (strtoupper($file_type) != strtoupper($allowed_file_type)) {
										$file_is_valid = FALSE;
										$msgerror  = $this->data_process_translate->check_vocab($datasession['language'],"invalid file type");
									}else{
										$file_is_valid = TRUE;
										$msgerror  = "";
										break;
									}
								}
							}							
							/////////////////////////////////////////////////////////////////////////////
							
							if ($file_is_valid){
								move_uploaded_file($origin_file,$target_file);
								$datapost[$form_field->field_name] = $filename_string;		
							}else{
								$full_table_name = NULL;
								if ($formtype == 'mainform'){
									$full_table_name = $data_menu['full_table_name'];
								}
								if ($formtype == 'subform'){
									$full_table_name = $this->dp_eform->get_subform_full_table_name($data_menu['id'],$subform_name);
								}
								$data_before = $this->dp_eform->get_data_prior_change($full_table_name,$form_fields,$id);	
								$datapost[$form_field->field_name] = $data_before[$form_field->field_name];
							}
						}else{
							$full_table_name = NULL;
							if ($formtype == 'mainform'){
								$full_table_name = $data_menu['full_table_name'];
							}
							if ($formtype == 'subform'){
								$full_table_name = $this->dp_eform->get_subform_full_table_name($data_menu['id'],$subform_name);
							}
							$data_before = $this->dp_eform->get_data_prior_change($full_table_name,$form_fields,$id);
							$datapost[$form_field->field_name] = $data_before[$form_field->field_name];
						}
						
						}	
					}
					
				}	
			}			
				
			if ($msgerror == ''){
				if($task == 'edit'){
					$submission = isset($_POST['submission']) ? $_POST['submission'] : NULL;
					
					if ($data_menu['is_approval'] == NULL){
						$this->dp_eform->update_data($datasession,$data_menu,$form_fields,$datapost,$id,$formtype,$subform_name);
						
						if ($checkbox_tables) {
							foreach ($checkbox_tables as $key => $value) {
								if ($datapost[$value]) {
									$this->dp_eform->clear_existing_data_checkbox($formtype,$value,$data_menu,$id);
									$this->dp_eform->new_data_checkbox($datasession,$formtype,$value,$data_menu,$id,$checkbox_selections_origin_table[$key],$datapost[$value]);
								}
							}
						}

						$msgerror = $this->data_process_translate->check_vocab($datasession['language'],"Data Changes have been saved")." ".anchor($this->control_name.'/index/'.$menu_name, "[".$this->data_process_translate->check_vocab($datasession['language'],"Return")."]");
					}
					
					////////// Submission Process ////////////////////////////////////
					if ($data_menu['is_workflowdata'] == 1 || $data_menu['is_approval'] == 1){
						if ($submission == 1 || $submission == 'revise' || $submission == 'reject' || $submission == 'approve'){
							$comm_msg = isset($_POST['wf_msg']) ? $_POST['wf_msg'] : NULL;
							switch ($submission) {
								case 'revise':
									$approval_type = 'Revise';
									$approval_string = "This request is need to revised";
									break;
								case 'reject':
									$approval_type = 'Reject';
									$approval_string = "This request has been rejected";
									break;
								case 'approve':
									$approval_type = 'Approve';
									$approval_string = "This request has been approved";
									break;
								default:
									$approval_type = 'Submit';
									$this->wf->generate_approval_sequence($datasession,$data_menu,$id,$datapost,$comm_msg);
									$approval_string = "This request has been submitted for approval";
									break;
							}
							$this->wf->update_status_submit($data_menu,$id,$submission,$approval_type,$datasession,$comm_msg);

							$this->wf->insert_wf_log($data_menu,$id,$approval_type,$comm_msg,$datasession);

							$msgerror = $this->data_process_translate->check_vocab($datasession['language'],$approval_string)." ".anchor($this->control_name.'/index/'.$menu_name, "[".$this->data_process_translate->check_vocab($datasession['language'],"Return")."]");
						}
					}
					/////////////////////////////////////////////////////////////////////////////
					
					$this->show_interface($menu_name,$id,'edit',$formtype,$subform_name,$datapost['main_id'],$msgerror);
					
					if ($formtype == 'subform'){
						redirect($this->control_name.'/edit/'.$menu_name.'/'.$datapost['main_id']);
					}
				}
				
				if($task == 'new'){
					$datapost['draft_id'] = isset($_POST['draft_id']) ? $_POST['draft_id'] : NULL;
					
					if ($this->dp_eform->check_if_menu_has_extended_data($data_menu)){
						$extended_field_id = $this->dp_eform->get_data_extend_from_table($data_menu)['full_table_name'].'_id';
						$datapost[$extended_field_id] = $this->session->userdata('selection_id');
						$this->session->unset_userdata('selection_id');
					}
					
					$this->dp_eform->new_data($datasession,$data_menu,$form_fields,$datapost,$formtype,$subform_name);
					if ($formtype != 'subform') {
						if ($datapost['draft_id'] != NULL){
							$data_id = $this->dp_eform->get_data_id_from_draft($data_menu,$datapost['draft_id']);

							if ($checkbox_tables) {
								foreach ($checkbox_tables as $key => $value) {
									if ($datapost[$value]) {
										$this->dp_eform->new_data_checkbox($datasession,$formtype,$value,$data_menu,$data_id,$checkbox_selections_origin_table[$key],$datapost[$value]);
									}
								}
							}
							
							redirect($this->control_name.'/edit/'.$menu_name.'/'.$data_id);
						}else{
							redirect($this->control_name.'/index/'.$menu_name);		
						}
					}else{
						redirect($this->control_name.'/edit/'.$menu_name.'/'.$datapost['main_id']);	
					}
				}
			} else {
				$this->show_interface($menu_name,$id,$task,$formtype,$subform_name,$datapost['main_id'],$msgerror,$datapost);
			}	
		}
		
		if ($task == 'delete'){
			$this->dp_eform->delete_data($datasession,$data_menu,$id,$formtype,$subform_name);
			if ($formtype != 'subform') {
				redirect($this->control_name.'/index/'.$menu_name);	
			}else{
				redirect($this->control_name.'/edit/'.$menu_name.'/'.$datapost['main_id']);	
			}
		}
	}
	
	function subform($act,$menu_name,$subform_name,$main_id,$data_id=0){
		$datasession = $this->session->userdata('logged_in');
		
		$language = $datasession['language'];
		$data['fullname'] = $datasession['fullname'];
		$data['app_title'] = $datasession['app_title'];
		$menu['user'] = $datasession['username'];
		$menu['app_id'] = $datasession['app_id'];
		
		$data_menu = $this->dp_eform->get_data_menu($menu_name);
		$function_access = $this->dp_eform->get_function_access_data($menu_name,$menu);
		$data_menu['is_insert_disable'] = $function_access['is_insert_disable'];
		$data_menu['is_edit_disable'] = $function_access['is_edit_disable'];
		$data_menu['is_delete_disable'] = $function_access['is_delete_disable'];
		
		if ($data_menu['is_insert_disable'] == 1) {
			if ($data_menu['is_approval'] != 1)	{
				redirect($this->control_name.'/index/'.$menu_name);	
			}
		}
		
		if ($act == 'add') { $task = 'new';}
		if ($act == 'edit') { $task = 'edit';}
		if ($act == 'remove') { $task = 'delete';}
		$this->show_interface($menu_name,$data_id,$task,'subform',$subform_name,$main_id);	
	}
	
	function show_interface($menu_name,$data_id,$task,$formtype,$subform_name='',$main_id = 0,$msgerror = '', $datapost = array()){
			$datasession = $this->session->userdata('logged_in');
			
			if (!($this->user->check_allow_access_page($datasession,$menu_name))){
				if (!$this->session->userdata('bypass_masterevent')){
					redirect('accessrestricted');
				}
			}
			
			$language = $datasession['language'];
			$data['fullname'] = $datasession['fullname'];
			$data['app_title'] = $datasession['app_title'];
			$menu['user'] = $datasession['username'];
			$menu['app_id'] = $datasession['app_id'];
			
			$data_menu = $this->dp_eform->get_data_menu($menu_name);
			$function_access = $this->dp_eform->get_function_access_data($menu_name,$menu);
			$data_menu['is_insert_disable'] = $function_access['is_insert_disable'];
			$data_menu['is_edit_disable'] = $function_access['is_edit_disable'];
			$data_menu['is_delete_disable'] = $function_access['is_delete_disable'];
			
			$data['menu'] = $this->menu->generatemenu($menu_name,$menu);
			$data['content_header'] = $this->content->content_header($language,$data_menu);

			$data['breadcrumb'] = $this->content->breadcrumb($language,$data_menu);
			
			if ($formtype == 'mainform'){ $main_id = $data_id; }
			$form_fields = $this->dp_eform->get_form_fields($data_menu['id'],$formtype,$task,$data_id,$subform_name);
			$data_detail = $this->dp_eform->get_data_detail($data_menu,$form_fields,$data_id,$formtype,$subform_name);
			
			if ($this->wf->lock_data_editing($data_menu,$main_id)){
				$data_menu['is_insert_disable'] = 1;
				$data_menu['is_edit_disable'] = 1;
				$data_menu['is_delete_disable'] = 1;
			}
			
			$html_components = $this->get_form_components($language,$form_fields,$data_detail,$task,$datapost,$data_menu,$main_id);
			$form_components = $html_components['form_components'];
			
			$draft_id = 0;
			$subformgrid = "";
			$btn_add_disabled = "";
			$datapost['search'] = "";
			$btn_submit_disabled = "";
			$btn_add_subform_data = "";
				
			if ($formtype == 'mainform'){
				//////////////// Render data grid from its subform //////////////////////////////////////////////////////////////////////////
			
				if ($data_menu['is_workflowdata'] == 1 || $data_menu['is_transdata'] == 1 || $data_menu['is_approval'] == 1){
					if ($task == 'new') {
						$draft_id = $this->dp_eform->get_draft_id($data_menu['full_table_name']);	
						$btn_add_disabled = "disabled";
					}
							
					$quey = $this->dp_eform->get_data_subform($data_menu['id']);
					foreach($quey as $row){
						
						////// validate subform data if required//////////////////////
						if ($row->is_required == 1 && $btn_submit_disabled == ""){
							 $btn_submit_disabled = $this->dp_eform->validate_subform_data($data_id,$data_menu,$row,$task);
						}

						//////////////////////////////////////////////////////////////////////////
						
						$mandatory_subform_data = ($row->is_required == 1) ? "<font color=\"red\">*</font>" : "";
						
						$btn_add_subform_data = "";
						if ($task != 'delete'){
							if (($task == 'new' && $data_menu['is_insert_disable'] != 1) || ($task == 'edit' && $data_menu['is_edit_disable'] != 1)){
								$btn_add_subform_data = "</br>
								<button type=\"button\" ".$btn_add_disabled." class=\"btn btn-primary\" onclick=\"location.href='".site_url($this->control_name."/subform/add/".$menu_name)."/".$row->subform_name."/".$data_id."';\"><i class=\"fa fa-plus-circle\" aria-hidden=\"true\"></i>&nbsp;".$this->data_process_translate->check_vocab($language,"Add")."</button>";		
							}
						}
							
						$subformgrid .= "<hr><label>".$row->subform_name."</label>".$mandatory_subform_data.$btn_add_subform_data."<br>".$this->load_datagrid($data_menu,$menu_name,$datapost,1000000,0,'subform',$row->subform_name,$main_id,$task);
					}
					
					////////////////////// Approval Communication box ////////////////////////////////////////////////////
					if ($data_menu['is_workflowdata'] == 1 || $data_menu['is_approval'] == 1){
						 $data_ta = array(
							        'name'        => 'wf_msg',
							        'id'          => 'wf_msg',
							        'value'       => '',
							        'rows'        => '5',
							        'cols'        => '10',
							        'style'       => 'width:100%',
							        'class'       => 'form-control'
							    );
						if ($this->wf->show_approval_comm_box($datasession,$data_menu,$data_detail)){
							$approval_msg_box = "<hr>
								<label>Requisition / Approval Message</label>&nbsp;".anchor_popup(site_url('comm_log/index/'.$this->wf->get_origin_data_menu_id($data_menu).'/'.$data_id),'[Approval Log]',array())."</br>".form_textarea($data_ta)."</div>";	
						}else{
							$approval_msg_box = "<hr>
								<label>Requisition / Approval Message</label>&nbsp;".anchor_popup(site_url('comm_log/index/'.$this->wf->get_origin_data_menu_id($data_menu).'/'.$data_id),'[Approval Log]',array());
						}
						$subformgrid .= $approval_msg_box;
					}
					///////////////////////////////////////////////////////////////////////////////////////////////////////////
				}
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			
			if ($task != 'selection'){
				$data['content'] = $this->content->load_content_form($language,$this->control_name,$menu_name,$form_components,$data_id,$task,'',$msgerror,$data_menu,$subformgrid,$draft_id,$btn_submit_disabled,$formtype,$subform_name,$main_id);
				$data['java_functions'] = $html_components['java_functions'];
			}else{
				$query = array();
				$options = array();
				$query = $this->dp_eform->get_data_extend_from_table($data_menu);
				$label = $query['label'];
				foreach($query['query'] as $row){
					$options[$row->Id] = $row->$query['field_name'];
				}
				$data['content'] = $this->content->load_content_form_selection($language,$this->control_name,$menu_name,$label,$options);
				$data['java_functions'] = '';
			}
			
			$this->load->view($this->view_name,$data);
	}
	
	function select($menu_name){
		$selection = isset($_POST['selection']) ? $_POST['selection'] : NULL;
		$this->session->set_userdata('selection_id', $selection);
		redirect($this->control_name.'/add/'.$menu_name);
	}
	
	function add($menu_name,$data_id=0){
		$datasession = $this->session->userdata('logged_in');
		
		$language = $datasession['language'];
		$data['fullname'] = $datasession['fullname'];
		$data['app_title'] = $datasession['app_title'];
		$menu['user'] = $datasession['username'];
		$menu['app_id'] = $datasession['app_id'];
		
		$data_menu = $this->dp_eform->get_data_menu($menu_name);
		$function_access = $this->dp_eform->get_function_access_data($menu_name,$menu);
		$data_menu['is_insert_disable'] = $function_access['is_insert_disable'];
		$data_menu['is_edit_disable'] = $function_access['is_edit_disable'];
		$data_menu['is_delete_disable'] = $function_access['is_delete_disable'];
		
		if ($data_menu['is_insert_disable'] == 1) redirect($this->control_name.'/index/'.$menu_name);
		
		if (!$this->dp_eform->is_extended_form($data_menu)){
			$this->show_interface($menu_name,$data_id,$task='new','mainform','',0);
		}else{
			$selection = $this->session->userdata('selection_id');
			if ($selection == NULL){
				$this->show_interface($menu_name,$data_id,$task='selection','mainform','',0);	
			}else{
				$this->show_interface($menu_name,$data_id,$task='new','mainform','',0);	
			}
		}
		
	}
	
	function cancel($menu_name){
		if ($this->session->userdata('bypass_masterevent')){
			$this->session->unset_userdata('bypass_masterevent');	
			echo "<script type='text/javascript'>";
			echo "window.close();";
			echo "</script>";
		}else{
			$this->session->unset_userdata('selection_id');
			redirect($this->control_name.'/index/'.$menu_name);	
		}
	}
	
	function edit($menu_name,$data_id=0){
		$this->show_interface($menu_name,$data_id,$task='edit','mainform','',0);	
	}
	
	function remove($menu_name,$data_id){
		$datasession = $this->session->userdata('logged_in');
		
		$language = $datasession['language'];
		$data['fullname'] = $datasession['fullname'];
		$data['app_title'] = $datasession['app_title'];
		$menu['user'] = $datasession['username'];
		$menu['app_id'] = $datasession['app_id'];
		
		$data_menu = $this->dp_eform->get_data_menu($menu_name);
		$function_access = $this->dp_eform->get_function_access_data($menu_name,$menu);
		$data_menu['is_insert_disable'] = $function_access['is_insert_disable'];
		$data_menu['is_edit_disable'] = $function_access['is_edit_disable'];
		$data_menu['is_delete_disable'] = $function_access['is_delete_disable'];
		
		if ($data_menu['is_delete_disable'] == 1) redirect($this->control_name.'/index/'.$menu_name);
		
		$this->show_interface($menu_name,$data_id,$task='delete','mainform','',0);	
	}
	
	function showall($menu_name){
		$this->session->unset_userdata($menu_name.'_search');
		redirect($this->control_name.'/index/'.$menu_name);
	}
	
	function index($menu_name,$offset = '0'){
		if($this->session->userdata('logged_in')) {
			if ($offset != 'new' && $offset != 'edit' && $offset != 'remove'){
				$page_base_url = $this->control_name.'/index/'.$menu_name;
				$this->session->unset_userdata('selection_id');
				$datasession = $this->session->userdata('logged_in');
				
				if (!($this->user->check_allow_access_page($datasession,$menu_name))){
					redirect('accessrestricted');
				}
			
				$language = $datasession['language'];
				$data['fullname'] = $datasession['fullname'];
				$data['app_title'] = $datasession['app_title'];
				$menu['user'] = $datasession['username'];
				$menu['app_id'] = $datasession['app_id'];
				
				$data_menu = $this->dp_eform->get_data_menu($menu_name);
				$function_access = $this->dp_eform->get_function_access_data($menu_name,$menu);
				$data_menu['is_insert_disable'] = $function_access['is_insert_disable'];
				$data_menu['is_edit_disable'] = $function_access['is_edit_disable'];
				$data_menu['is_delete_disable'] = $function_access['is_delete_disable'];
				
				if (isset($_POST['btnsearch'])) {
					$search['search'] = isset($_POST['txtsearch']) ? $_POST['txtsearch'] : '';
					if ($search['search'] == '') {
						$this->showall($menu_name);
					}
				}
				
				$search['search'] = isset($_POST['txtsearch']) ? $_POST['txtsearch'] : '';
				$filter = FALSE;
				
				if ($search['search'] != NULL){
					$this->session->set_userdata($menu_name.'_search', $search);
				}
				
				$datapost = $this->session->userdata($menu_name.'_search');
				
				$page['base_url'] = site_url($page_base_url);
				//$page['total_rows'] = $this->db->count_all('('.$this->query.') A');
				//$page['total_rows'] = $this->data_process_langcountry->count_rows($datapost);
				$page['total_rows'] = ($data_menu['full_table_name'] !='')? $this->dp_eform->count_rows($data_menu,$datapost,'mainform','') : 0;
				$page['offset'] = $offset;
				$page['per_page'] = 15;
				$page['uri_segment'] = 4;
				$page['first_link'] = "<< ".$this->data_process_translate->check_vocab($language,"First")." ";
				$page['last_link'] = " ".$this->data_process_translate->check_vocab($language,"Last")." >>";
				$page['prev_link'] = "< ".$this->data_process_translate->check_vocab($language,"Previous")." ";
				$page['next_link'] = " ".$this->data_process_translate->check_vocab($language,"Next")." >";
				$this->pagination->initialize($page);
				$page['pagination'] = $this->pagination->create_links();
				$content['pagination'] = $page['pagination'];
				$content['datagrid'] = ($data_menu['full_table_name'] !='')? $this->load_datagrid($data_menu,$menu_name,$datapost,$page['per_page'],$page['offset'],'mainform','',0,'') : '';
				
				$search = array('search' => $datapost['search']);
				$content['search'] = $search;
			
				$data['menu'] = $this->menu->generatemenu($menu_name,$menu);
				$data['content_header'] = $this->content->content_header($language,$data_menu);
				$data['breadcrumb'] = $this->content->breadcrumb($language,$data_menu);
				$data['content'] = $this->content->load_content($language,$this->control_name,$menu_name,$content,$data_menu);
				$data['java_functions'] = '';				
			   	$this->load->view($this->view_name,$data);			
			}
		}else{
			header ("Location: ".base_url());
		}
	}
}
